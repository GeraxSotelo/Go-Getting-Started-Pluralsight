"Note","Course","Module","Clip","Time in Clip","URL"
"Every Go source file that imports a package must use that package in some way.","Go: Getting Started ","Introduction","Demo: Hello World","4:02","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=242&noteid=3586d218-582b-4074-97ba-170ff8852a48"
"Go source code is formatted with tabs, not spaces.","Go: Getting Started ","Introduction","Demo: Hello World","5:04","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=304&noteid=ed4b81e1-87e2-418d-bcdd-ab7c59601c69"
"Go enforces automatic semicolon insertion. The compiler expects a function to have the opening curly brace in the same line or else it will add a semicolon.","Go: Getting Started ","Introduction","Demo: Hello World","6:10","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=370&noteid=5bb25a5e-6067-44e8-89d8-17d68635d121"
"Module - project space to house the source code - a directory that has a go.mod file","Go: Getting Started ","Starting a Project","Creating a Project","0:06","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=6&noteid=7043360d-215e-4cc5-aa5b-cfe8d8ec8652"
"Initialize the Go module - a directory that has a go.mod file","Go: Getting Started ","Starting a Project","Creating a Project","0:47","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=47&noteid=f59d0eca-5d5b-468a-95a6-a3e3a653dd26"
"go mod init <name of module>","Go: Getting Started ","Starting a Project","Creating a Project","1:05","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=65&noteid=f76d3784-79d0-4a31-92ec-07fb01e56840"
"Run module","Go: Getting Started ","Starting a Project","Creating a Project","2:57","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=177&noteid=f77a89f5-bd0b-4537-a783-9c4e6c7dd139"
"With floating-point variables, size must be specified. (float32, float64)","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","1:54","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=114&noteid=d6e9aad6-3fd9-49e0-b5d1-54f3a5e67cb7"
"Implicit initialization syntax.\nUsing :=  Go will imply the data type","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","3:15","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=195&noteid=50aee18a-db37-4378-b6a8-21d0e3d40707"
"Declaring a local variable and not using it will cause the compiler to throw an error.","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","4:21","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=261&noteid=57921424-8bbc-4d92-880a-55c7fb948fd2"
"'complex' data type. Built-in complex function","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","5:34","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=334&noteid=55624e22-67bd-4fc7-a16a-774110716ab8"
"'real' & 'imag' functions","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","6:14","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=374&noteid=281f5a11-5260-4794-9ed6-76efe0f437b5"
"Pointer data type. A variable will point to another location in memory that's going to hold the relevant information","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","0:21","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=21&noteid=471e2d92-e75c-44da-bf49-4ed7c63f7537"
"Dereferencing ","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","1:32","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=92&noteid=2b6a1d3e-a667-4d61-b784-91138d32e1d3"
"Assigning a value to an uninitialized pointer throws an error. Go wants to make sure there's been an explicit location in memory that's been set aside, but it won't set it aside until it's asked to","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","2:04","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=124&noteid=edfdb261-8f28-4181-bd3b-b15d3d44be9f"
"address of operator","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","4:29","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=269&noteid=1782cd7d-bd48-4442-bcef-0d2ad860db94"
"Address of operator (&). Go allows to create & declare a variable, then create a pointer that points to the variable.","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","4:48","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=288&noteid=4716d68b-b676-4ddb-a6c9-0661359351d2"