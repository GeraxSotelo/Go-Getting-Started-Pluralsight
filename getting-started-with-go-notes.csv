"Note","Course","Module","Clip","Time in Clip","URL"
"Every Go source file that imports a package must use that package in some way.","Go: Getting Started ","Introduction","Demo: Hello World","4:02","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=242&noteid=3586d218-582b-4074-97ba-170ff8852a48"
"Go source code is formatted with tabs, not spaces.","Go: Getting Started ","Introduction","Demo: Hello World","5:04","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=304&noteid=ed4b81e1-87e2-418d-bcdd-ab7c59601c69"
"Go enforces automatic semicolon insertion. The compiler expects a function to have the opening curly brace in the same line or else it will add a semicolon.","Go: Getting Started ","Introduction","Demo: Hello World","6:10","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=521468ce-bd75-42b8-9c68-0e1e32152f65&clip=3&mode=live&start=370&noteid=5bb25a5e-6067-44e8-89d8-17d68635d121"
"Module - project space to house the source code - a directory that has a go.mod file","Go: Getting Started ","Starting a Project","Creating a Project","0:06","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=6&noteid=7043360d-215e-4cc5-aa5b-cfe8d8ec8652"
"Initialize the Go module - a directory that has a go.mod file","Go: Getting Started ","Starting a Project","Creating a Project","0:47","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=47&noteid=f59d0eca-5d5b-468a-95a6-a3e3a653dd26"
"go mod init <name of module>","Go: Getting Started ","Starting a Project","Creating a Project","1:05","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=65&noteid=f76d3784-79d0-4a31-92ec-07fb01e56840"
"Run module","Go: Getting Started ","Starting a Project","Creating a Project","2:57","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c9efb374-e78a-4224-b854-bc89c3c0b5be&clip=4&mode=live&start=177&noteid=f77a89f5-bd0b-4537-a783-9c4e6c7dd139"
"With floating-point variables, size must be specified. (float32, float64)","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","1:54","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=114&noteid=d6e9aad6-3fd9-49e0-b5d1-54f3a5e67cb7"
"Implicit initialization syntax.\nUsing :=  Go will imply the data type","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","3:15","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=195&noteid=50aee18a-db37-4378-b6a8-21d0e3d40707"
"Declaring a local variable and not using it will cause the compiler to throw an error.","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","4:21","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=261&noteid=57921424-8bbc-4d92-880a-55c7fb948fd2"
"'complex' data type. Built-in complex function","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","5:34","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=334&noteid=55624e22-67bd-4fc7-a16a-774110716ab8"
"'real' & 'imag' functions","Go: Getting Started ","Working with Primitive Data Types","Declaring Variables with Primitive Data Types","6:14","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=1&mode=live&start=374&noteid=281f5a11-5260-4794-9ed6-76efe0f437b5"
"Pointer data type. A variable will point to another location in memory that's going to hold the relevant information","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","0:21","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=21&noteid=471e2d92-e75c-44da-bf49-4ed7c63f7537"
"Dereferencing ","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","1:32","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=92&noteid=2b6a1d3e-a667-4d61-b784-91138d32e1d3"
"Assigning a value to an uninitialized pointer throws an error. Go wants to make sure there's been an explicit location in memory that's been set aside, but it won't set it aside until it's asked to","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","2:04","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=124&noteid=edfdb261-8f28-4181-bd3b-b15d3d44be9f"
"address of operator","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","4:29","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=269&noteid=1782cd7d-bd48-4442-bcef-0d2ad860db94"
"Address of operator (&). Go allows to create & declare a variable, then create a pointer that points to the variable.","Go: Getting Started ","Working with Primitive Data Types","Working with Pointers","4:48","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=2&mode=live&start=288&noteid=4716d68b-b676-4ddb-a6c9-0661359351d2"
"Constants have to be initialized when they are declared","Go: Getting Started ","Working with Primitive Data Types","Creating Constants","0:50","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=3&mode=live&start=50&noteid=2d046244-d019-4b78-96c1-87ac5f08734c"
"The value of a constant has to be able to be determined at 'compile time'. Can't assign it to a return value of a function that gets evaluated at 'runtime'","Go: Getting Started ","Working with Primitive Data Types","Creating Constants","1:03","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=3&mode=live&start=63&noteid=c6d5d164-f632-414a-be8f-1528a174e15a"
"Go will dynamically interpret the type of a constant, unless the constant's type is specified","Go: Getting Started ","Working with Primitive Data Types","Creating Constants","1:55","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=3&mode=live&start=115&noteid=79b42d30-8d4d-45f8-ae8d-3e05883303bc"
"In order to work with iota and constant expressions, it has to be in the package level","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","0:22","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=22&noteid=5619c7f9-13f3-4904-af5d-53faa8a27889"
"Constant blocks","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","1:00","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=60&noteid=a2d6abd6-a000-4dbc-920d-587f93491922"
"iota","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","1:55","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=115&noteid=1812299a-8c1e-433c-901b-c5fe1bcf6888"
"Every time iota is reused it increments its value by one. Long chains of constants can be built and the values of the constants will change.","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","2:15","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=135&noteid=2d0d5cd5-c001-4a2e-ac11-353d864cf16a"
"bit shift operation","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","2:41","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=161&noteid=e36ec416-904d-48f6-8500-4ea9d7f2d5e2"
"If a value is not specified for a constant below another constant, it'll reuse the constant expression above it","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","3:37","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=217&noteid=6cdea999-42d5-4252-9842-0cafc245afc0"
"iota will reset in a new constant block","Go: Getting Started ","Working with Primitive Data Types","Using Iota and Constant Expressions","5:11","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=21509301-f3d2-44bb-ac43-85a16f6cb7a0&clip=4&mode=live&start=311&noteid=18acf762-f80a-41a1-8b8c-a9c1b930db12"
"A colon in the square brackets of an array creates a slice of that array from the beginning of the array to the end of it.","Go: Getting Started ","Working with Collections","Working with Slices","0:25","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=2&mode=live&start=25&noteid=7e321c31-ce79-4c1d-a410-a6a35818892c"
"The slice is pointing to the data that the array is keeping. Any changes made to the array are going to be reflected in the slice, and any changes made in the slice are going to be reflected back to the underlying array. (still bound to a fixed sized array)","Go: Getting Started ","Working with Collections","Working with Slices","1:27","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=2&mode=live&start=87&noteid=08bae1cb-4ffd-49d0-bbad-bae8a8e4e7a9"
"A slice is not a fixed size entity","Go: Getting Started ","Working with Collections","Working with Slices","3:57","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=2&mode=live&start=237&noteid=cdb1cdfe-a5b3-403a-bddc-f2b0fefd8358"
"Go will automatically resize the underlying array by creating a new array & having the slice point to it","Go: Getting Started ","Working with Collections","Working with Slices","4:58","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=2&mode=live&start=298&noteid=dd686d09-8368-4c17-b193-df1f60e37a1b"
"Delete elements out of a map with the built-in delete function","Go: Getting Started ","Working with Collections","Using the Map Data Type","2:07","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=3&mode=live&start=127&noteid=c068d7c4-5699-45b4-92ba-a8228040c65e"
"Must end final line with a comma or a closing curly brace, or else Go will add a semicolon","Go: Getting Started ","Working with Collections","Working with Structs","5:32","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=4&mode=live&start=332&noteid=f656f238-9b87-446d-b76b-48afff81c6a5"
"Module - project space - everything in the directory that contains the go.mod file","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","0:34","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=34&noteid=a3a28728-f880-448f-a4a4-614751935f2c"
"A package is just a directory. If the package needs to be interacted with, the name of the folder matters","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","1:14","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=74&noteid=a7643bd9-7082-46ab-9b03-09898afaccb7"
"package main has a unique meaning in Go. It specifies an entry point for the application","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","2:25","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=145&noteid=9ae18668-72fa-457a-9082-9ad5d1b4b1aa"
"Variables can use variable blocks","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","4:02","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=242&noteid=ddc18942-58d4-4a1f-aabf-4ba9b9a78d28"
"At the package level there's no need to provide the colon operator to get the implicit initialization syntax. The compiler will imply the data type.","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","5:27","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=327&noteid=d161d62e-9abe-4bcd-b29d-fc4f32bf59bc"
"go run .\nruns the main package in the current directory","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","9:04","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=544&noteid=2d677eef-24fa-4221-8067-5703d3196c83"
"'run' will build a temporary copy & then throw away the executable after it's done executing. 'build' is going to build an executable & leave it in the current directory","Go: Getting Started ","Working with Collections","Demo: Adding Variables to the Webservice","9:27","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=b3dde0ad-29b6-4bd6-818a-aec46d70528e&clip=5&mode=live&start=567&noteid=27503d1d-3f79-42aa-921a-e1863074eba5"
"If more than one parameter is of the same type, the data type can be set one time, instead of for each parameter.","Go: Getting Started ","Creating Functions and Methods","Adding Parameters to Functions","3:23","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=2&mode=live&start=203&noteid=4c8590a8-3e44-4051-95dc-e2aca5b734c1"
"Multiple returns in a function","Go: Getting Started ","Creating Functions and Methods","Returning Data from Functions","4:15","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=3&mode=live&start=255&noteid=2a02b5df-6978-471e-bceb-e24d0e3f0002"
"write-only variable (_) allows you to dump any type of data into it and you don't have to use it.","Go: Getting Started ","Creating Functions and Methods","Returning Data from Functions","5:43","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=3&mode=live&start=343&noteid=8f8d1a8a-d2ef-425b-8321-87935fe1333c"
"Add a controllers package which will handle the routing of an HTTP request that comes into the web server to the correct method in the model layer.","Go: Getting Started ","Creating Functions and Methods","Demo: Adding Functions to the Webservice","0:23","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=5&mode=live&start=23&noteid=142d3634-9ffd-4391-b5fd-a860555b0cf3"
"Specify the type that you want to bind a function to. This will make the function into a method","Go: Getting Started ","Creating Functions and Methods","Demo: Adding Functions to the Webservice","1:19","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=5&mode=live&start=79&noteid=9948b642-e337-436d-80f7-026cfc91ca5c"
"Method will require a ResponseWriter object from the HTTP package and it's going to receive a Request object","Go: Getting Started ","Creating Functions and Methods","Demo: Adding Functions to the Webservice","2:20","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=5&mode=live&start=140&noteid=4b17c52d-e02b-4878-a606-a52f8d370869"
"Write method in ResponseWriter object takes 1 argument, a slice of bytes.","Go: Getting Started ","Creating Functions and Methods","Demo: Adding Functions to the Webservice","3:01","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=5&mode=live&start=181&noteid=d10242bc-5126-43c6-b28c-6588152b82b4"
"Go doesn't use constructors. It uses constructor functions","Go: Getting Started ","Creating Functions and Methods","Demo: Creating Methods","1:54","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=6&mode=live&start=114&noteid=6d468af2-4fb2-40de-aeba-25f808756d95"
"Convention in naming a constructor function is starting with the word 'new' and then the name of the type of object that will be constructed","Go: Getting Started ","Creating Functions and Methods","Demo: Creating Methods","2:23","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=6&mode=live&start=143&noteid=31351087-3624-4828-b0ae-15a10341c20c"
"A constructor function often returns a pointer to the object to avoid an unnecessary copy operation","Go: Getting Started ","Creating Functions and Methods","Demo: Creating Methods","2:59","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=6&mode=live&start=179&noteid=4d9503aa-87cf-4020-953f-78d1695e63ab"
"When dealing with struct data types, constructing an object and using the 'address of' operator (&) without a named variable is permissible. You can immediately take the address of it.","Go: Getting Started ","Creating Functions and Methods","Demo: Creating Methods","3:45","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=6&mode=live&start=225&noteid=50945dc6-c869-4cff-b0bd-ceca4e8757a0"
"Go will recognize if we're returning the address of a local variable & automatically promote the variable up to the level that it needs to be so we don't lose the variable & we don't lose track of the memory that was being allocated by that function","Go: Getting Started ","Creating Functions and Methods","Demo: Creating Methods","4:23","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=6&mode=live&start=263&noteid=6bb399f8-ee20-4e57-87c9-0a040ef8b25f"
"Handler type","Go: Getting Started ","Creating Functions and Methods","Demo: Implementing Interfaces","0:38","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=7&mode=live&start=38&noteid=6f196edf-6404-4aac-8d4d-f38d8eb0f122"
"Because our built controller has a method ServeHTTP (same name as handler interface), & receives a ResponseWriter & a pointer to a Request object as parameters, it automatically implements the handler interface. We don't need to specify that we're explicitly implementing that interface","Go: Getting Started ","Creating Functions and Methods","Demo: Implementing Interfaces","1:08","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=7&mode=live&start=68&noteid=d40f5f1e-3d4c-44b8-90be-a95e664321bc"
"Any object, any type, that has a method on it called ServeHTTP & has the correct function signature will implement this Handler interface","Go: Getting Started ","Creating Functions and Methods","Demo: Implementing Interfaces","2:33","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=7&mode=live&start=153&noteid=cba748ba-baf2-4737-bccf-8f933f8e535c"
"When working with routing, ""/something"" is different than ""/something/""","Go: Getting Started ","Creating Functions and Methods","Demo: Implementing Interfaces","3:20","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=7&mode=live&start=200&noteid=c9ee4bc2-1e8b-4184-a466-58bd87f0d255"
"http.ListenAndServe();","Go: Getting Started ","Creating Functions and Methods","Demo: Starting the Webservice","0:27","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=c3da445d-900f-4588-9adc-6e9027ddb5d4&clip=8&mode=live&start=27&noteid=5fe6d0c6-162a-44aa-984c-d03f9e3c1656"
"Using 'break' statement in a for loop","Go: Getting Started ","Controlling Program Flow","Creating Loops that Terminate Based on a Condition","2:40","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=2&mode=live&start=160&noteid=006c4c45-ab7c-4b0d-aa95-efcabc3dd7d3"
"Using 'continue' statement in a for loop","Go: Getting Started ","Controlling Program Flow","Creating Loops that Terminate Based on a Condition","3:23","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=2&mode=live&start=203&noteid=79b07526-19e5-4f97-b037-d731ee18fc4f"
"When using a loop till condition with a post clause, it has to have 3 terms in the for loop to indicate to the compiler that this is a loop till condition with a post clause","Go: Getting Started ","Controlling Program Flow","Using Conditional Loops with Post Clauses","0:40","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=3&mode=live&start=40&noteid=bdf993e1-6298-492a-b8a7-5ff32dd6f678"
"Check length with built-in len() function","Go: Getting Started ","Controlling Program Flow","Looping Over Collections","0:31","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=5&mode=live&start=31&noteid=4e60f484-929b-4176-a4e6-b8237422fee9"
"Using indexer & value when looping over collections. Set them equal to the 'range' keyword followed by the collection being iterated over.","Go: Getting Started ","Controlling Program Flow","Looping Over Collections","1:11","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=5&mode=live&start=71&noteid=fdab7302-211b-4db0-9035-c7d9ade96f8d"
"The 'range' keyword tells the compiler that we're going to be passing in a collection type & then it's going to return out the index in the first variable that gets returned & the value at that index in the second variable that's returned","Go: Getting Started ","Controlling Program Flow","Looping Over Collections","1:28","https://app.pluralsight.com/player?course=getting-started-with-go&author=mike-vansickle&name=7e052382-4c2a-4153-80ad-54d9f842ec58&clip=5&mode=live&start=88&noteid=a576e8ef-48ee-48f1-8637-706e7b1e3698"